"use client";
import Header from "@/components/Header/Header";
import SideBar from "@/components/SideBar/SideBar";
import { Inter } from "next/font/google";
import React, { useState, useEffect } from "react";
import "./globals.css";
import "../../styles/bootstrap.min.css";
import "../../styles/Header.css";
import "../../styles/SideBar.css";
import "../../styles/Add_Product.css";
import "../../styles/Product_List.css";
const inter = Inter({ subsets: ["latin"] });
import axios from "axios";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { API_URL } from "../../config/AppConfig";
import auth from "../../libraries/AuthLibrary";
import Cookies from "cookies-js";
import { store } from '../../store';
import { Provider } from 'react-redux';
import FloatLoader from "@/utilities/loader/FloatLoader";


// export const metadata = {
//     title: "Create Next App",
//     description: "Generated by create next app",
// };

axios.defaults.baseURL = API_URL;
axios.defaults.headers.common['access-token'] = auth.token();

export default function RootLayout({ children }) {
    const [toggleValue, setToggleValue] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [isToken, setIsToken] = useState(null);


    useEffect(() => {
        if (typeof window !== 'undefined') {
            setIsToken(Cookies('access-token'));
        }
      }, []); 


    return (
        
            <html lang="en" >
                <body className={inter.className} created-by="Jiaur Rahman | Date: 01-09-2023">
                <Provider store={store}>
                    <>
                        {/*Loader for every component*/}
                        {isLoading ? <FloatLoader isLoading={true}/> : null}
                        
                        {
                            //(auth.token()) &&
                            //(Cookies('access-token')) &&
                            (isToken) &&
                            <Header callback={(value) => setToggleValue(value)} />
                        }
                        {
                            //(auth.token()) &&
                            // (Cookies('access-token')) &&
                            (isToken) &&
                            <SideBar isToggle={toggleValue} />
                        }

                        <div className={`main ${toggleValue ? "collapsed" : null} ${!isToken ? 'login_box' : null } `}>{children}</div>
                        <ToastContainer
                            position="bottom-right"
                            theme="colored"
                        />
                    </>
                    </Provider>
                </body>
            </html>
        
    );
}
